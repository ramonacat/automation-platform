use crate::parsing::IdentifierRaw;
use crate::parsing::FieldRaw;
use crate::parsing::StructDefinitionRaw;
use crate::parsing::MetadataRaw;
use crate::parsing::FileRaw;
use crate::parsing::RpcDefinitionRaw;
use crate::parsing::RpcRaw;
use crate::parsing::EnumVariantRaw;
use crate::parsing::EnumDefinitionRaw;
use crate::parsing::TypeRaw;
grammar();

RIdentifier:IdentifierRaw<'input> =
    <id:r"[a-zA-Z0-9_][a-zA-Z0-9_-]*"> => IdentifierRaw::new(id);

RType:TypeRaw<'input> = {
    <id:RIdentifier> => TypeRaw::Type(id),
    <id:RIdentifier> "?" => TypeRaw::Optional(id),
    <id:RIdentifier> "[" "]" => TypeRaw::Array(id),
}

RField:FieldRaw<'input> = <name:RIdentifier> ":" <type_name:RType> => FieldRaw::new(name, type_name);

RFields:Vec<FieldRaw<'input>> = {
    <field:RField> => vec![field],
    <mut rest:RFields> "," <field:RField?> => {
        if let Some(field) = field {
            rest.push(field);
        }

        rest
     }
}

RStructDefinition:StructDefinitionRaw<'input> = {
    "struct" <name:RIdentifier> "{" <fields:RFields?> "}" => StructDefinitionRaw(name, fields.unwrap_or_else(|| vec![])),
}

REnumVariant:EnumVariantRaw<'input> = {
    <name:RIdentifier> => EnumVariantRaw::new(name, vec![]),
    <name:RIdentifier> "(" <fields:RFields?> ")" => EnumVariantRaw::new(name, fields.unwrap_or_else(|| vec![])),
}

REnumBody:Vec<EnumVariantRaw<'input>> = {
    <variant:REnumVariant> => vec![variant],
    <mut rest:REnumBody> "," <variant:REnumVariant?> => {
        if let Some(variant) = variant {
            rest.push(variant);
        }

        rest
    }
}

REnumDefinition:EnumDefinitionRaw<'input> = {
    "enum" <name:RIdentifier> "{" <body:REnumBody?> "}" => EnumDefinitionRaw::new(name, body.unwrap_or_else(|| vec![])),
}

RMetadata:MetadataRaw<'input> = {
    "metadata" "{" <fields:RFields?> "}" => MetadataRaw::new(fields.unwrap_or_else(|| vec![]))
}

RRPCDefinition:RpcDefinitionRaw<'input> = {
    <name:RIdentifier> "(" <input_type:RType> ")" "->" <is_stream:"stream"?> <output_type:RType> => RpcDefinitionRaw::new(name, input_type, output_type, is_stream.is_some())
}

RRPCDefinitions:Vec<RpcDefinitionRaw<'input>> = {
    <rpc_def:RRPCDefinition> => vec![rpc_def],
    <mut rest:RRPCDefinitions> ";" <rpc_def:RRPCDefinition?> => {
        if let Some(rpc_def) = rpc_def {
            rest.push(rpc_def);
        }

        rest
    }
}

RRPC:RpcRaw<'input> = {
    "rpc" "{" <definitions:RRPCDefinitions?> "}" => RpcRaw::new(definitions.unwrap_or_else(|| vec![]))
}

RStructDefinitions:Vec<StructDefinitionRaw<'input>> = {
    <rest:RStructDefinitions?> <st:RStructDefinition> => {
        if let Some(mut rest) = rest {
            rest.push(st);

            rest
        } else {
            vec![st]
        }
    }
}

REnumDefinitions:Vec<EnumDefinitionRaw<'input>> = {
    <rest:REnumDefinitions?> <ed:REnumDefinition> => {
        if let Some(mut rest) = rest {
            rest.push(ed);

            rest
        } else {
            vec![ed]
        }
    }
}

pub RFile:FileRaw<'input> = {
    <meta:RMetadata?> <structs:RStructDefinitions> <enums:REnumDefinitions?> <rpc:RRPC?> => FileRaw::new(meta, structs, enums.unwrap_or_else(|| vec![]), rpc)
}
